// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Sensei.AspNet.Tests.FakeServer;

namespace Sensei.AspNet.Tests.Migrations
{
    [DbContext(typeof(FakeServerDbContext))]
    internal class FakeServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("Sensei.AspNet.Tests.FakeServer.Entities.Category", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<bool>("Enabled")
                    .HasColumnType("INTEGER");

                b.Property<string>("Info")
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .HasColumnType("TEXT");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.ToTable("Categories");
            });

            modelBuilder.Entity("Sensei.AspNet.Tests.FakeServer.Entities.CategoryTimeSlot", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<Guid>("CategoryId")
                    .HasColumnType("TEXT");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<Guid>("TimeSlotId")
                    .HasColumnType("TEXT");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("TimeSlotId");

                b.ToTable("CategoryTimeSlots");
            });

            modelBuilder.Entity("Sensei.AspNet.Tests.FakeServer.Entities.Product", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<int?>("Availability")
                    .HasColumnType("INTEGER");

                b.Property<long>("AvailableSince")
                    .HasColumnType("INTEGER");

                b.Property<Guid>("CategoryAltId")
                    .HasColumnType("TEXT");

                b.Property<Guid>("CategoryId")
                    .HasColumnType("TEXT");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<float?>("Discount")
                    .HasColumnType("REAL");

                b.Property<TimeSpan>("DiscountAfter")
                    .HasColumnType("TEXT");

                b.Property<bool>("Enabled")
                    .HasColumnType("INTEGER");

                b.Property<Guid?>("FileId")
                    .HasColumnType("TEXT");

                b.Property<string>("Info")
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .HasColumnType("TEXT");

                b.Property<bool?>("OnlySunday")
                    .HasColumnType("INTEGER");

                b.Property<float>("Price")
                    .HasColumnType("REAL");

                b.Property<int>("Status")
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("CategoryAltId");

                b.HasIndex("CategoryId");

                b.ToTable("Products");
            });

            modelBuilder.Entity("Sensei.AspNet.Tests.FakeServer.Entities.ProductAlt1", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<int?>("Availability")
                    .HasColumnType("INTEGER");

                b.Property<long>("AvailableSince")
                    .HasColumnType("INTEGER");

                b.Property<Guid>("CategoryAltId")
                    .HasColumnType("TEXT");

                b.Property<Guid>("CategoryId")
                    .HasColumnType("TEXT");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<float?>("Discount")
                    .HasColumnType("REAL");

                b.Property<TimeSpan>("DiscountAfter")
                    .HasColumnType("TEXT");

                b.Property<bool>("Enabled")
                    .HasColumnType("INTEGER");

                b.Property<Guid?>("FileId")
                    .HasColumnType("TEXT");

                b.Property<string>("Info")
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .HasColumnType("TEXT");

                b.Property<bool?>("OnlySunday")
                    .HasColumnType("INTEGER");

                b.Property<float>("Price")
                    .HasColumnType("REAL");

                b.Property<int>("Status")
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("CategoryAltId");

                b.HasIndex("CategoryId");

                b.ToTable("ProductsAlt1");
            });

            modelBuilder.Entity("Sensei.AspNet.Tests.FakeServer.Entities.ProductAlt2", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<int?>("Availability")
                    .HasColumnType("INTEGER");

                b.Property<long>("AvailableSince")
                    .HasColumnType("INTEGER");

                b.Property<Guid>("CategoryAltId")
                    .HasColumnType("TEXT");

                b.Property<Guid>("CategoryId")
                    .HasColumnType("TEXT");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<float?>("Discount")
                    .HasColumnType("REAL");

                b.Property<TimeSpan>("DiscountAfter")
                    .HasColumnType("TEXT");

                b.Property<bool>("Enabled")
                    .HasColumnType("INTEGER");

                b.Property<Guid?>("FileId")
                    .HasColumnType("TEXT");

                b.Property<string>("Info")
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .HasColumnType("TEXT");

                b.Property<bool?>("OnlySunday")
                    .HasColumnType("INTEGER");

                b.Property<float>("Price")
                    .HasColumnType("REAL");

                b.Property<int>("Status")
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("CategoryAltId");

                b.HasIndex("CategoryId");

                b.ToTable("ProductsAlt2");
            });

            modelBuilder.Entity("Sensei.AspNet.Tests.FakeServer.Entities.TimeSlot", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<TimeSpan>("EndTime")
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .HasColumnType("TEXT");

                b.Property<TimeSpan>("StartTime")
                    .HasColumnType("TEXT");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.ToTable("TimeSlots");
            });

            modelBuilder.Entity("Sensei.AspNet.Tests.FakeServer.Entities.CategoryTimeSlot", b =>
            {
                b.HasOne("Sensei.AspNet.Tests.FakeServer.Entities.Category", "Category")
                    .WithMany("CategoryTimeSlots")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Sensei.AspNet.Tests.FakeServer.Entities.TimeSlot", "TimeSlot")
                    .WithMany("CategoryTimeSlots")
                    .HasForeignKey("TimeSlotId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Sensei.AspNet.Tests.FakeServer.Entities.Product", b =>
            {
                b.HasOne("Sensei.AspNet.Tests.FakeServer.Entities.Category", "CategoryAlt")
                    .WithMany()
                    .HasForeignKey("CategoryAltId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Sensei.AspNet.Tests.FakeServer.Entities.Category", "Category")
                    .WithMany()
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Sensei.AspNet.Tests.FakeServer.Entities.ProductAlt1", b =>
            {
                b.HasOne("Sensei.AspNet.Tests.FakeServer.Entities.Category", "CategoryAlt")
                    .WithMany()
                    .HasForeignKey("CategoryAltId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Sensei.AspNet.Tests.FakeServer.Entities.Category", "Category")
                    .WithMany()
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Sensei.AspNet.Tests.FakeServer.Entities.ProductAlt2", b =>
            {
                b.HasOne("Sensei.AspNet.Tests.FakeServer.Entities.Category", "CategoryAlt")
                    .WithMany()
                    .HasForeignKey("CategoryAltId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Sensei.AspNet.Tests.FakeServer.Entities.Category", "Category")
                    .WithMany()
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}